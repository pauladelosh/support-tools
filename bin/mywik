#!/bin/bash

#
#  Determine if the Bastion ControlMaster is already connected
#
#  @return true if the ControlMaster is connected
#
function isControlMasterActive
{
    local BASTION_HOST="$1"
    local BASTION_MUX_ACTIVE=$(ls /tmp/ssh_mux_${BASTION_HOST}* 2>/dev/null | wc -l | awk '{print $1}')

    # We actually want to find all bastion PIDs, not just BASTION_HOST's
    local BASTION_PIDS=$(getActiveBastionPids bastion | paste -s -d, -)

    if [[ "$BASTION_MUX_ACTIVE" -ne "0" ]]; then
        BASTION_MUX_ACTIVE="0"
        if [[ -n "$BASTION_PIDS" ]]; then
            BASTION_MUX_ACTIVE=$(lsof -p $(echo $BASTION_PIDS | paste -s -d, -) 2>/dev/null | grep /tmp/ssh_mux_${BASTION_HOST} | wc -l | awk '{print $1}')
        fi
    fi

    echo $BASTION_MUX_ACTIVE
}

#
#  Get list of PIDs for procs that ssh to a bastion
#
function getActiveBastionPids
{
    local BASTION_HOST="$1"
    pgrep -f "ssh.*${BASTION_HOST}"
}

#
#  List active Bastion processes
#
function listActiveBastionProcesses
{
    local BASTION_HOST="$1"
    local BASTION_PIDS=$(getActiveBastionPids $BASTION_HOST)
    if [ -n "$BASTION_PIDS" ]; then
        ps -o "pid,command" -wp $BASTION_PIDS
    fi
}

#
#  Get bastion key
#
function getBastionKey
{
    eval echo $(grep -A 20 -E '^Host bastion$' ~/.ssh/ah_config | grep IdentityFile | head -n 1 | awk '{print $2}')
}

#
#  Determine if the bastion key has been added to the agent
#
function isBastionKeyInAgent
{
    local BASTION_KEY=$(getBastionKey)
    ssh-add -l | grep "$BASTION_KEY" > /dev/null 2>&1
    echo $?
}

#
#  Adds bastion key
#
function addBastionKeyToAgent
{
    local BASTION_KEY=$(getBastionKey)
    if [[ $(uname) -eq "Darwin" ]]; then
        ssh-add -K "$BASTION_KEY"
    else
        ssh-add "$BASTION_KEY"
    fi
}

#
#  Connect to the expect script of choice
#
function connectBastion
{
    local BASTION_HOST=$1

    DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && cd ../lib && pwd )"
    cd ~/.WiKID
    $DIR/$( basename "${BASH_SOURCE[0]}" ).sh $BASTION_HOST
}

#
#  Kill any existing bastion connection
#
function disconnectBastion
{
    local BASTION_HOST=$1

    while true; do
        read -p "Kill the existing bastion connection? (y/n) " yn
            case $yn in
                [Yy]* ) break;;
                [Nn]* ) return;;
                * ) echo "invalid response, try again";;
            esac
    done
        killBastion $BASTION_HOST
        attemptConnection $BASTION_HOST
}

#
# Kills the SSH session
#
function killBastion
{
    local BASTION_HOST=$1
    local BASTION_PIDS=$(getActiveBastionPids $BASTION_HOST)
    if [ -n "$BASTION_PIDS" ]; then
        kill -9 $BASTION_PIDS
        echo -e "Active $BASTION_HOST connections have been killed.\n"
    else
        echo There are no active bastion processes.
    fi
}

function attemptConnection
{
    local BASTION_HOST=$1

    if [[ $(isControlMasterActive $BASTION_HOST) -ne "0" ]]; then
        echo -e "One or more bastion connections may be active. Existing procs:\n"
        listActiveBastionProcesses $BASTION_HOST
        echo
        disconnectBastion $BASTION_HOST
    else
        if [[ $(isBastionKeyInAgent) -ne 0 ]]; then
            echo "Public key was not found in ssh-agent; invoking ssh-add"
            addBastionKeyToAgent
        else
            echo "Public key was found in ssh-agent"
        fi
        echo
        connectBastion $BASTION_HOST
        if [[ $(isControlMasterActive $BASTION_HOST) -ne "0" ]]; then
            echo The bastion connection is active.
        fi
    fi
}

#
#  Check if the bastion is connected, connect if it is not  
#
function mywik_main
{
    case $1 in
        kill)
            local BASTION_HOST=bastion
            [[ -n "$2" ]] && BASTION_HOST=$2

            killBastion $BASTION_HOST
        ;;
        status)
            local BASTION_HOST=bastion
            [[ -n "$2" ]] && BASTION_HOST=$2

            if [[ $(isControlMasterActive $BASTION_HOST) -ne "0" ]]; then
                echo -e "The bastion connection is active.\n"
                listActiveBastionProcesses $BASTION_HOST
            else
                echo The bastion connection is not active
            fi
        ;;
        "")
            attemptConnection bastion
        ;;
        3|[eE][oO][pP]|bastion-3)
            attemptConnection bastion-3
        ;;
        21|[uU][sS]|bastion-21)
            attemptConnection bastion-21
        ;;
        22|[eE][uU]|bastion-22)
            attemptConnection bastion-22
        ;;
        133|[aA][uU]|bastion-133)
            attemptConnection bastion-133
        ;;
        *)
            echo "Usage: bastion [<number>|au|eu|us|kill|status]"
    esac
}

mywik_main $@
